import React, { useState } from 'react';
import { Star, MessageSquare, Clock, TrendingUp, Filter, Search, MoreVertical, Reply, Flag, Share, Download, Eye, ChevronDown, Calendar, User, ThumbsUp, ThumbsDown, AlertTriangle } from 'lucide-react';
import { Card } from '../ui/Card';
import { Badge } from '../ui/Badge';
import { Button } from '../ui/Button';

interface Review {
  id: string;
  reviewerName: string;
  reviewerAvatar: string;
  rating: number;
  date: string;
  platform: 'google' | 'facebook' | 'yelp';
  text: string;
  sentiment: 'positive' | 'neutral' | 'negative';
  responseStatus: 'responded' | 'pending' | 'flagged';
  response?: string;
  responseDate?: string;
  helpful: number;
  location: string;
}

const mockReviews: Review[] = [
  {
    id: '1',
    reviewerName: 'Sarah Johnson',
    reviewerAvatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop',
    rating: 5,
    date: '2 hours ago',
    platform: 'google',
    text: 'Absolutely fantastic service! The staff was incredibly knowledgeable and helped me find exactly what I was looking for. The facility is clean, modern, and well-organized. I\'ll definitely be coming back and recommending this place to friends and family.',
    sentiment: 'positive',
    responseStatus: 'responded',
    response: 'Thank you so much for your wonderful review, Sarah! We\'re thrilled to hear about your positive experience with our team. We look forward to serving you again soon!',
    responseDate: '1 hour ago',
    helpful: 12,
    location: 'Downtown Location'
  },
  {
    id: '2',
    reviewerName: 'Mike Chen',
    reviewerAvatar: 'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop',
    rating: 2,
    date: '5 hours ago',
    platform: 'google',
    text: 'Service was slower than expected and the wait time was quite long. The staff seemed overwhelmed and I had to ask multiple times for assistance. The quality was okay but not worth the premium price.',
    sentiment: 'negative',
    responseStatus: 'pending',
    helpful: 3,
    location: 'Main Street Location'
  },
  {
    id: '3',
    reviewerName: 'Emily Rodriguez',
    reviewerAvatar: 'https://images.pexels.com/photos/1130626/pexels-photo-1130626.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop',
    rating: 4,
    date: '1 day ago',
    platform: 'facebook',
    text: 'Good experience overall. The product quality is excellent and the location is convenient. Staff was friendly and professional. Only minor complaint is the parking situation could be better.',
    sentiment: 'positive',
    responseStatus: 'responded',
    response: 'Thank you for your feedback, Emily! We\'re glad you enjoyed your experience. We\'re actually working on improving our parking situation - stay tuned for updates!',
    responseDate: '1 day ago',
    helpful: 8,
    location: 'Oak Avenue Location'
  },
  {
    id: '4',
    reviewerName: 'David Thompson',
    reviewerAvatar: 'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop',
    rating: 5,
    date: '2 days ago',
    platform: 'yelp',
    text: 'Outstanding! This place exceeded all my expectations. The attention to detail is remarkable and you can tell they really care about customer satisfaction.',
    sentiment: 'positive',
    responseStatus: 'responded',
    response: 'We\'re so grateful for your kind words, David! Customer satisfaction is indeed our top priority.',
    responseDate: '2 days ago',
    helpful: 15,
    location: 'Downtown Location'
  },
  {
    id: '5',
    reviewerName: 'Lisa Park',
    reviewerAvatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop',
    rating: 3,
    date: '3 days ago',
    platform: 'google',
    text: 'Average experience. Nothing particularly stood out as exceptional, but nothing was terrible either. Would consider returning if improvements are made.',
    sentiment: 'neutral',
    responseStatus: 'flagged',
    helpful: 2,
    location: 'Westside Location'
  }
];

export const Reviews: React.FC = () => {
  const [selectedFilter, setSelectedFilter] = useState<'all' | 'pending' | 'responded' | 'flagged'>('all');
  const [selectedRating, setSelectedRating] = useState<number | 'all'>('all');
  const [selectedPlatform, setSelectedPlatform] = useState<'all' | 'google' | 'facebook' | 'yelp'>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [viewMode, setViewMode] = useState<'cards' | 'list'>('cards');
  const [showReplyModal, setShowReplyModal] = useState<string | null>(null);
  const [replyText, setReplyText] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');

  const replyTemplates = [
    { id: 'grateful', name: 'Grateful Response', text: 'Thank you so much for your wonderful review! We\'re thrilled to hear about your positive experience.' },
    { id: 'apologetic', name: 'Apologetic Response', text: 'We sincerely apologize for not meeting your expectations. We\'d love the opportunity to make this right.' },
    { id: 'professional', name: 'Professional Response', text: 'Thank you for taking the time to share your feedback. We appreciate your business and look forward to serving you again.' }
  ];

  const filteredReviews = mockReviews.filter(review => {
    const matchesFilter = selectedFilter === 'all' || review.responseStatus === selectedFilter;
    const matchesRating = selectedRating === 'all' || review.rating === selectedRating;
    const matchesPlatform = selectedPlatform === 'all' || review.platform === selectedPlatform;
    const matchesSearch = searchTerm === '' || 
      review.reviewerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      review.text.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesFilter && matchesRating && matchesPlatform && matchesSearch;
  });

  const stats = {
    totalReviews: mockReviews.length,
    averageRating: (mockReviews.reduce((sum, r) => sum + r.rating, 0) / mockReviews.length).toFixed(1),
    newToday: mockReviews.filter(r => r.date.includes('hour')).length,
    responseRate: Math.round((mockReviews.filter(r => r.responseStatus === 'responded').length / mockReviews.length) * 100),
    avgResponseTime: '2.3 hours',
    sentiment: {
      positive: mockReviews.filter(r => r.sentiment === 'positive').length,
      neutral: mockReviews.filter(r => r.sentiment === 'neutral').length,
      negative: mockReviews.filter(r => r.sentiment === 'negative').length
    }
  };

  const StatCard: React.FC<{
    title: string;
    value: string | number;
    icon: React.ElementType;
    gradient: string;
    subtitle?: string;
  }> = ({ title, value, icon: Icon, gradient, subtitle }) => (
    <Card hover>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">{title}</p>
          <p className="text-2xl font-bold text-gray-900 dark:text-white">{value}</p>
          {subtitle && <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">{subtitle}</p>}
        </div>
        <div className={`p-3 rounded-full ${gradient}`}>
          <Icon size={20} className="text-white" />
        </div>
      </div>
    </Card>
  );

  const getPlatformBadge = (platform: string) => {
    const badges = {
      google: <Badge variant="info" size="sm">Google</Badge>,
      facebook: <Badge variant="gradient" size="sm">Facebook</Badge>,
      yelp: <Badge variant="warning" size="sm">Yelp</Badge>
    };
    return badges[platform as keyof typeof badges];
  };

  const getSentimentBadge = (sentiment: string) => {
    const badges = {
      positive: <Badge variant="success" size="sm">Positive</Badge>,
      neutral: <Badge variant="info" size="sm">Neutral</Badge>,
      negative: <Badge variant="error" size="sm">Negative</Badge>
    };
    return badges[sentiment as keyof typeof badges];
  };

  const getResponseStatusBadge = (status: string) => {
    const badges = {
      responded: <Badge variant="success" size="sm">Responded</Badge>,
      pending: <Badge variant="warning" size="sm">Pending</Badge>,
      flagged: <Badge variant="error" size="sm">Flagged</Badge>
    };
    return badges[status as keyof typeof badges];
  };

  const StarRating: React.FC<{ rating: number; size?: number }> = ({ rating, size = 16 }) => (
    <div className="flex items-center gap-1">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          size={size}
          className={`${
            star <= rating ? 'text-yellow-500 fill-current' : 'text-gray-300 dark:text-gray-600'
          }`}
        />
      ))}
    </div>
  );

  const ReviewCard: React.FC<{ review: Review }> = ({ review }) => (
    <Card hover className="group">
      <div className="flex items-start gap-4">
        <img
          src={review.reviewerAvatar}
          alt={review.reviewerName}
          className="w-12 h-12 rounded-full flex-shrink-0"
        />
        
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-2">
            <div>
              <h4 className="font-semibold text-gray-900 dark:text-white">{review.reviewerName}</h4>
              <div className="flex items-center gap-2 mt-1">
                <StarRating rating={review.rating} />
                <span className="text-sm text-gray-600 dark:text-gray-400">{review.date}</span>
                <span className="text-sm text-gray-500 dark:text-gray-500">â€¢ {review.location}</span>
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              {getPlatformBadge(review.platform)}
              <Button variant="ghost" size="sm">
                <MoreVertical size={16} />
              </Button>
            </div>
          </div>

          <p className="text-gray-700 dark:text-gray-300 mb-3 leading-relaxed">
            {review.text}
          </p>

          <div className="flex items-center gap-3 mb-3">
            {getSentimentBadge(review.sentiment)}
            {getResponseStatusBadge(review.responseStatus)}
            <div className="flex items-center gap-1 text-sm text-gray-500 dark:text-gray-500">
              <ThumbsUp size={14} />
              <span>{review.helpful} helpful</span>
            </div>
          </div>

          {review.response && (
            <div className="bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-3 rounded-r-lg mb-3">
              <div className="flex items-center gap-2 mb-2">
                <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <Reply size={12} className="text-white" />
                </div>
                <span className="text-sm font-medium text-blue-900 dark:text-blue-100">Business Response</span>
                <span className="text-xs text-blue-700 dark:text-blue-300">â€¢ {review.responseDate}</span>
              </div>
              <p className="text-sm text-blue-800 dark:text-blue-200">{review.response}</p>
            </div>
          )}

          <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowReplyModal(review.id)}
              disabled={review.responseStatus === 'responded'}
            >
              <Reply size={16} />
              {review.responseStatus === 'responded' ? 'Edit Reply' : 'Reply'}
            </Button>
            <Button variant="ghost" size="sm">
              <Flag size={16} />
              Flag
            </Button>
            <Button variant="ghost" size="sm">
              <Share size={16} />
              Share
            </Button>
            <Button variant="ghost" size="sm">
              <Download size={16} />
              Export
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
            Review Management
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            {stats.totalReviews} total reviews â€¢ {stats.averageRating} average rating
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button variant="secondary">Bulk Actions</Button>
          <Button variant="secondary">Templates</Button>
          <Button>Generate QR Code</Button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 lg:gap-6">
        <StatCard
          title="New Today"
          value={stats.newToday}
          icon={MessageSquare}
          gradient="bg-gradient-to-r from-[#667eea] to-[#764ba2]"
        />
        <StatCard
          title="Response Rate"
          value={`${stats.responseRate}%`}
          icon={Reply}
          gradient="bg-gradient-to-r from-[#11998e] to-[#38ef7d]"
        />
        <StatCard
          title="Avg Response Time"
          value={stats.avgResponseTime}
          icon={Clock}
          gradient="bg-gradient-to-r from-[#f093fb] to-[#f5576c]"
        />
        <StatCard
          title="Positive"
          value={stats.sentiment.positive}
          icon={ThumbsUp}
          gradient="bg-gradient-to-r from-[#11998e] to-[#38ef7d]"
          subtitle="sentiment"
        />
        <StatCard
          title="Negative"
          value={stats.sentiment.negative}
          icon={AlertTriangle}
          gradient="bg-gradient-to-r from-[#f45a4e] to-[#e53e3e]"
          subtitle="needs attention"
        />
      </div>

      {/* Filters and Search */}
      <Card>
        <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
          <div className="flex flex-wrap items-center gap-3">
            <div className="relative">
              <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500" />
              <input
                type="text"
                placeholder="Search reviews..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full lg:w-64 pl-10 pr-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
              />
            </div>

            <select
              value={selectedFilter}
              onChange={(e) => setSelectedFilter(e.target.value as any)}
              className="px-3 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="responded">Responded</option>
              <option value="flagged">Flagged</option>
            </select>

            <select
              value={selectedRating}
              onChange={(e) => setSelectedRating(e.target.value === 'all' ? 'all' : Number(e.target.value))}
              className="px-3 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
            >
              <option value="all">All Ratings</option>
              <option value="5">5 Stars</option>
              <option value="4">4 Stars</option>
              <option value="3">3 Stars</option>
              <option value="2">2 Stars</option>
              <option value="1">1 Star</option>
            </select>

            <select
              value={selectedPlatform}
              onChange={(e) => setSelectedPlatform(e.target.value as any)}
              className="px-3 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
            >
              <option value="all">All Platforms</option>
              <option value="google">Google</option>
              <option value="facebook">Facebook</option>
              <option value="yelp">Yelp</option>
            </select>
          </div>

          <div className="flex items-center gap-2">
            <Button
              variant={viewMode === 'cards' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('cards')}
            >
              Cards
            </Button>
            <Button
              variant={viewMode === 'list' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('list')}
            >
              List
            </Button>
          </div>
        </div>
      </Card>

      {/* Reviews List */}
      <div className="space-y-4">
        {filteredReviews.length === 0 ? (
          <Card className="text-center py-16">
            <div className="max-w-md mx-auto">
              <div className="inline-flex p-6 bg-gradient-to-r from-[#667eea] to-[#764ba2] rounded-full mb-6">
                <MessageSquare size={32} className="text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                No Reviews Found
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                No reviews match your current filters. Try adjusting your search criteria.
              </p>
            </div>
          </Card>
        ) : (
          filteredReviews.map((review) => (
            <ReviewCard key={review.id} review={review} />
          ))
        )}
      </div>

      {/* Reply Modal */}
      {showReplyModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <Card className="w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                Reply to Review
              </h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowReplyModal(null)}
              >
                âœ•
              </Button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Response Template
                </label>
                <select
                  value={selectedTemplate}
                  onChange={(e) => {
                    setSelectedTemplate(e.target.value);
                    const template = replyTemplates.find(t => t.id === e.target.value);
                    if (template) setReplyText(template.text);
                  }}
                  className="w-full px-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
                >
                  <option value="">Select a template...</option>
                  {replyTemplates.map(template => (
                    <option key={template.id} value={template.id}>{template.name}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Your Response
                </label>
                <textarea
                  value={replyText}
                  onChange={(e) => setReplyText(e.target.value)}
                  rows={4}
                  className="w-full px-4 py-3 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent resize-none"
                  placeholder="Write your response..."
                />
                <div className="flex justify-between items-center mt-2">
                  <span className="text-xs text-gray-500 dark:text-gray-500">
                    {replyText.length}/500 characters
                  </span>
                  <Button variant="ghost" size="sm">
                    AI Suggest
                  </Button>
                </div>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-3 mt-6">
              <Button
                variant="secondary"
                className="flex-1"
                onClick={() => setShowReplyModal(null)}
              >
                Cancel
              </Button>
              <Button
                className="flex-1"
                disabled={!replyText.trim()}
              >
                Post Response
              </Button>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
};