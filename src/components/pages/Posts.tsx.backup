import React, { useState } from 'react';
import { FileText, Calendar, Clock, Share2, Plus, Eye, Edit, Trash2, Copy, BarChart3, Image, Link, Hash, Globe, Facebook, Instagram, Linkedin, ChevronLeft, ChevronRight } from 'lucide-react';
import { Card } from '../ui/Card';
import { Badge } from '../ui/Badge';
import { Button } from '../ui/Button';

interface Post {
  id: string;
  title: string;
  content: string;
  platforms: ('google' | 'facebook' | 'instagram' | 'linkedin')[];
  status: 'published' | 'scheduled' | 'draft' | 'failed';
  scheduledDate: string;
  publishedDate?: string;
  type: 'update' | 'event' | 'offer' | 'product';
  engagement: {
    likes: number;
    comments: number;
    shares: number;
    clicks: number;
    reach: number;
  };
  media?: string[];
  location: string;
}

const mockPosts: Post[] = [
  {
    id: '1',
    title: 'Summer Sale Event',
    content: 'Join us for our biggest summer sale! Get up to 50% off on all services. Limited time offer - don\'t miss out! 🌞 #SummerSale #GreatDeals',
    platforms: ['google', 'facebook', 'instagram'],
    status: 'published',
    scheduledDate: '2025-01-15T10:00:00',
    publishedDate: '2025-01-15T10:00:00',
    type: 'offer',
    engagement: {
      likes: 245,
      comments: 32,
      shares: 18,
      clicks: 156,
      reach: 2840
    },
    media: ['summer-sale-banner.jpg'],
    location: 'All Locations'
  },
  {
    id: '2',
    title: 'New Team Member Introduction',
    content: 'We\'re excited to welcome Sarah to our team! She brings 5 years of experience and a passion for customer service. Stop by and say hello! 👋',
    platforms: ['google', 'facebook'],
    status: 'scheduled',
    scheduledDate: '2025-01-18T14:30:00',
    type: 'update',
    engagement: {
      likes: 0,
      comments: 0,
      shares: 0,
      clicks: 0,
      reach: 0
    },
    media: ['team-photo.jpg'],
    location: 'Downtown Location'
  },
  {
    id: '3',
    title: 'Customer Appreciation Day',
    content: 'Thank you to all our amazing customers! Your support means the world to us. Here\'s to many more years of serving our community! ❤️',
    platforms: ['google', 'facebook', 'instagram', 'linkedin'],
    status: 'published',
    scheduledDate: '2025-01-12T16:00:00',
    publishedDate: '2025-01-12T16:00:00',
    type: 'update',
    engagement: {
      likes: 189,
      comments: 45,
      shares: 23,
      clicks: 89,
      reach: 1950
    },
    location: 'All Locations'
  },
  {
    id: '4',
    title: 'Workshop: Digital Marketing Basics',
    content: 'Join us for a free workshop on digital marketing basics! Learn how to grow your business online. Register now - limited seats available! 📚',
    platforms: ['linkedin', 'facebook'],
    status: 'draft',
    scheduledDate: '2025-01-20T18:00:00',
    type: 'event',
    engagement: {
      likes: 0,
      comments: 0,
      shares: 0,
      clicks: 0,
      reach: 0
    },
    location: 'Main Street Location'
  },
  {
    id: '5',
    title: 'New Product Launch',
    content: 'Introducing our latest innovation! This game-changing product will revolutionize how you work. Pre-order now and get 20% off! 🚀',
    platforms: ['google', 'instagram'],
    status: 'failed',
    scheduledDate: '2025-01-16T12:00:00',
    type: 'product',
    engagement: {
      likes: 0,
      comments: 0,
      shares: 0,
      clicks: 0,
      reach: 0
    },
    media: ['product-launch.jpg', 'product-demo.mp4'],
    location: 'All Locations'
  }
];

const contentTemplates = [
  {
    id: 'seasonal',
    name: 'Seasonal Promotion',
    content: 'Don\'t miss our seasonal special! Limited time offer with amazing savings. Visit us today! 🎉',
    type: 'offer'
  },
  {
    id: 'behind-scenes',
    name: 'Behind the Scenes',
    content: 'Take a peek behind the scenes at our daily operations. We love what we do! 👀',
    type: 'update'
  },
  {
    id: 'customer-spotlight',
    name: 'Customer Spotlight',
    content: 'Featuring one of our amazing customers! Thank you for being part of our community. ⭐',
    type: 'update'
  },
  {
    id: 'educational',
    name: 'Educational Content',
    content: 'Did you know? Here\'s a helpful tip that can make a difference in your daily routine! 💡',
    type: 'update'
  }
];

export const Posts: React.FC = () => {
  const [selectedStatus, setSelectedStatus] = useState<'all' | 'published' | 'scheduled' | 'draft' | 'failed'>('all');
  const [selectedType, setSelectedType] = useState<'all' | 'update' | 'event' | 'offer' | 'product'>('all');
  const [viewMode, setViewMode] = useState<'calendar' | 'list'>('list');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [newPost, setNewPost] = useState({
    title: '',
    content: '',
    platforms: [] as string[],
    scheduledDate: '',
    type: 'update' as const,
    location: 'All Locations'
  });

  const filteredPosts = mockPosts.filter(post => {
    const matchesStatus = selectedStatus === 'all' || post.status === selectedStatus;
    const matchesType = selectedType === 'all' || post.type === selectedType;
    return matchesStatus && matchesType;
  });

  const stats = {
    totalPosts: mockPosts.length,
    publishedThisMonth: mockPosts.filter(p => p.status === 'published').length,
    scheduledPosts: mockPosts.filter(p => p.status === 'scheduled').length,
    totalEngagement: mockPosts.reduce((sum, p) => sum + p.engagement.likes + p.engagement.comments + p.engagement.shares, 0),
    totalReach: mockPosts.reduce((sum, p) => sum + p.engagement.reach, 0),
    avgEngagementRate: '4.2%'
  };

  const StatCard: React.FC<{
    title: string;
    value: string | number;
    icon: React.ElementType;
    gradient: string;
    subtitle?: string;
  }> = ({ title, value, icon: Icon, gradient, subtitle }) => (
    <Card hover>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">{title}</p>
          <p className="text-2xl font-bold text-gray-900 dark:text-white">{value}</p>
          {subtitle && <p className="text-xs text-gray-500 dark:text-gray-500 mt-1">{subtitle}</p>}
        </div>
        <div className={`p-3 rounded-full ${gradient}`}>
          <Icon size={20} className="text-white" />
        </div>
      </div>
    </Card>
  );

  const getStatusBadge = (status: string) => {
    const badges = {
      published: <Badge variant="success" size="sm">Published</Badge>,
      scheduled: <Badge variant="info" size="sm">Scheduled</Badge>,
      draft: <Badge variant="warning" size="sm">Draft</Badge>,
      failed: <Badge variant="error" size="sm">Failed</Badge>
    };
    return badges[status as keyof typeof badges];
  };

  const getTypeBadge = (type: string) => {
    const badges = {
      update: <Badge variant="info" size="sm">Update</Badge>,
      event: <Badge variant="gradient" size="sm">Event</Badge>,
      offer: <Badge variant="warning" size="sm">Offer</Badge>,
      product: <Badge variant="success" size="sm">Product</Badge>
    };
    return badges[type as keyof typeof badges];
  };

  const getPlatformIcon = (platform: string) => {
    const icons = {
      google: <Globe size={14} className="text-blue-600" />,
      facebook: <Facebook size={14} className="text-blue-600" />,
      instagram: <Instagram size={14} className="text-pink-600" />,
      linkedin: <Linkedin size={14} className="text-blue-700" />
    };
    return icons[platform as keyof typeof icons];
  };

  const PostCard: React.FC<{ post: Post }> = ({ post }) => (
    <Card hover className="group">
      <div className="flex items-start justify-between mb-4">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{post.title}</h3>
            {getStatusBadge(post.status)}
            {getTypeBadge(post.type)}
          </div>
          
          <p className="text-gray-700 dark:text-gray-300 mb-3 line-clamp-2">
            {post.content}
          </p>

          <div className="flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-3">
            <div className="flex items-center gap-1">
              <Calendar size={14} />
              <span>{new Date(post.scheduledDate).toLocaleDateString()}</span>
            </div>
            <div className="flex items-center gap-1">
              <Clock size={14} />
              <span>{new Date(post.scheduledDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
            </div>
            <span>• {post.location}</span>
          </div>

          <div className="flex items-center gap-2 mb-3">
            <span className="text-sm text-gray-600 dark:text-gray-400">Platforms:</span>
            <div className="flex items-center gap-1">
              {post.platforms.map(platform => (
                <div key={platform} className="flex items-center gap-1">
                  {getPlatformIcon(platform)}
                </div>
              ))}
            </div>
          </div>

          {post.status === 'published' && (
            <div className="grid grid-cols-5 gap-4 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <div className="text-center">
                <p className="text-sm font-semibold text-gray-900 dark:text-white">{post.engagement.likes}</p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Likes</p>
              </div>
              <div className="text-center">
                <p className="text-sm font-semibold text-gray-900 dark:text-white">{post.engagement.comments}</p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Comments</p>
              </div>
              <div className="text-center">
                <p className="text-sm font-semibold text-gray-900 dark:text-white">{post.engagement.shares}</p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Shares</p>
              </div>
              <div className="text-center">
                <p className="text-sm font-semibold text-gray-900 dark:text-white">{post.engagement.clicks}</p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Clicks</p>
              </div>
              <div className="text-center">
                <p className="text-sm font-semibold text-gray-900 dark:text-white">{post.engagement.reach.toLocaleString()}</p>
                <p className="text-xs text-gray-600 dark:text-gray-400">Reach</p>
              </div>
            </div>
          )}
        </div>

        <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity ml-4">
          <Button variant="ghost" size="sm">
            <Eye size={16} />
          </Button>
          <Button variant="ghost" size="sm">
            <Edit size={16} />
          </Button>
          <Button variant="ghost" size="sm">
            <Copy size={16} />
          </Button>
          <Button variant="ghost" size="sm" className="text-red-600">
            <Trash2 size={16} />
          </Button>
        </div>
      </div>
    </Card>
  );

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-300 bg-clip-text text-transparent">
            Content Calendar
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-1">
            {stats.totalPosts} total posts • {stats.publishedThisMonth} published this month
          </p>
        </div>
        <div className="flex items-center gap-3">
          <Button variant="secondary">Templates</Button>
          <Button variant="secondary">Bulk Upload</Button>
          <Button onClick={() => setShowCreateModal(true)}>
            <Plus size={16} />
            Create Post
          </Button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 lg:gap-6">
        <StatCard
          title="Posts This Month"
          value={stats.publishedThisMonth}
          icon={FileText}
          gradient="bg-gradient-to-r from-[#667eea] to-[#764ba2]"
        />
        <StatCard
          title="Scheduled Posts"
          value={stats.scheduledPosts}
          icon={Calendar}
          gradient="bg-gradient-to-r from-[#f093fb] to-[#f5576c]"
        />
        <StatCard
          title="Total Engagement"
          value={stats.totalEngagement.toLocaleString()}
          icon={Share2}
          gradient="bg-gradient-to-r from-[#11998e] to-[#38ef7d]"
        />
        <StatCard
          title="Total Reach"
          value={stats.totalReach.toLocaleString()}
          icon={Eye}
          gradient="bg-gradient-to-r from-[#f45a4e] to-[#e53e3e]"
        />
        <StatCard
          title="Engagement Rate"
          value={stats.avgEngagementRate}
          icon={BarChart3}
          gradient="bg-gradient-to-r from-[#667eea] to-[#764ba2]"
          subtitle="average"
        />
      </div>

      {/* Filters and View Toggle */}
      <Card>
        <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
          <div className="flex flex-wrap items-center gap-3">
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value as any)}
              className="px-3 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="published">Published</option>
              <option value="scheduled">Scheduled</option>
              <option value="draft">Draft</option>
              <option value="failed">Failed</option>
            </select>

            <select
              value={selectedType}
              onChange={(e) => setSelectedType(e.target.value as any)}
              className="px-3 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
            >
              <option value="all">All Types</option>
              <option value="update">Updates</option>
              <option value="event">Events</option>
              <option value="offer">Offers</option>
              <option value="product">Products</option>
            </select>

            <Button variant="secondary" size="sm">
              <Calendar size={16} />
              This Month
            </Button>
          </div>

          <div className="flex items-center gap-2">
            <Button
              variant={viewMode === 'list' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('list')}
            >
              List
            </Button>
            <Button
              variant={viewMode === 'calendar' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('calendar')}
            >
              Calendar
            </Button>
          </div>
        </div>
      </Card>

      {/* Content Templates */}
      <Card>
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Quick Templates</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {contentTemplates.map(template => (
            <div
              key={template.id}
              className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 cursor-pointer transition-colors"
              onClick={() => {
                setNewPost(prev => ({
                  ...prev,
                  title: template.name,
                  content: template.content,
                  type: template.type as any
                }));
                setShowCreateModal(true);
              }}
            >
              <h4 className="font-medium text-gray-900 dark:text-white mb-2">{template.name}</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">{template.content}</p>
            </div>
          ))}
        </div>
      </Card>

      {/* Posts List */}
      <div className="space-y-4">
        {filteredPosts.length === 0 ? (
          <Card className="text-center py-16">
            <div className="max-w-md mx-auto">
              <div className="inline-flex p-6 bg-gradient-to-r from-[#667eea] to-[#764ba2] rounded-full mb-6">
                <FileText size={32} className="text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                No Posts Found
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mb-6">
                No posts match your current filters. Create your first post to get started!
              </p>
              <Button onClick={() => setShowCreateModal(true)}>
                <Plus size={16} />
                Create Your First Post
              </Button>
            </div>
          </Card>
        ) : (
          filteredPosts.map((post) => (
            <PostCard key={post.id} post={post} />
          ))
        )}
      </div>

      {/* Create Post Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <Card className="w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                Create New Post
              </h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowCreateModal(false)}
              >
                ✕
              </Button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Post Title
                  </label>
                  <input
                    type="text"
                    value={newPost.title}
                    onChange={(e) => setNewPost(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full px-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
                    placeholder="Enter post title..."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Content
                  </label>
                  <textarea
                    value={newPost.content}
                    onChange={(e) => setNewPost(prev => ({ ...prev, content: e.target.value }))}
                    rows={6}
                    className="w-full px-4 py-3 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent resize-none"
                    placeholder="Write your post content..."
                  />
                  <div className="flex justify-between items-center mt-2">
                    <span className="text-xs text-gray-500 dark:text-gray-500">
                      {newPost.content.length}/2000 characters
                    </span>
                    <Button variant="ghost" size="sm">
                      <Hash size={14} />
                      Add Hashtags
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Post Type
                  </label>
                  <select
                    value={newPost.type}
                    onChange={(e) => setNewPost(prev => ({ ...prev, type: e.target.value as any }))}
                    className="w-full px-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
                  >
                    <option value="update">Update</option>
                    <option value="event">Event</option>
                    <option value="offer">Offer</option>
                    <option value="product">Product</option>
                  </select>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Platforms
                  </label>
                  <div className="space-y-2">
                    {['google', 'facebook', 'instagram', 'linkedin'].map(platform => (
                      <label key={platform} className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          checked={newPost.platforms.includes(platform)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setNewPost(prev => ({ ...prev, platforms: [...prev.platforms, platform] }));
                            } else {
                              setNewPost(prev => ({ ...prev, platforms: prev.platforms.filter(p => p !== platform) }));
                            }
                          }}
                          className="rounded border-gray-300 text-[#f45a4e] focus:ring-[#f45a4e]"
                        />
                        <div className="flex items-center gap-2">
                          {getPlatformIcon(platform)}
                          <span className="text-sm text-gray-700 dark:text-gray-300 capitalize">{platform}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Schedule Date & Time
                  </label>
                  <input
                    type="datetime-local"
                    value={newPost.scheduledDate}
                    onChange={(e) => setNewPost(prev => ({ ...prev, scheduledDate: e.target.value }))}
                    className="w-full px-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Location
                  </label>
                  <select
                    value={newPost.location}
                    onChange={(e) => setNewPost(prev => ({ ...prev, location: e.target.value }))}
                    className="w-full px-4 py-2 bg-white/50 dark:bg-black/30 backdrop-blur-sm border border-white/30 dark:border-white/20 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-[#f45a4e] focus:border-transparent"
                  >
                    <option value="All Locations">All Locations</option>
                    <option value="Downtown Location">Downtown Location</option>
                    <option value="Main Street Location">Main Street Location</option>
                    <option value="Oak Avenue Location">Oak Avenue Location</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Media
                  </label>
                  <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center">
                    <Image size={32} className="mx-auto text-gray-400 mb-2" />
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      Drag & drop images or videos here
                    </p>
                    <Button variant="ghost" size="sm" className="mt-2">
                      Browse Files
                    </Button>
                  </div>
                </div>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-3 mt-6">
              <Button
                variant="secondary"
                className="flex-1"
                onClick={() => setShowCreateModal(false)}
              >
                Save as Draft
              </Button>
              <Button
                variant="secondary"
                className="flex-1"
              >
                Preview
              </Button>
              <Button
                className="flex-1"
                disabled={!newPost.title || !newPost.content || newPost.platforms.length === 0}
              >
                {newPost.scheduledDate ? 'Schedule Post' : 'Publish Now'}
              </Button>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
};