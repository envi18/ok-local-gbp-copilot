// src/components/pages/PublicReportShare.tsx
// COMPLETE FIXED VERSION - Replace entire file with this

import { AlertCircle, Calendar, Loader, MapPin } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { ExternalReportService } from '../../lib/externalReportService';
import type { ExternalReport } from '../../types/externalReport';
import { EnhancedAIReportDisplay } from '../ui/EnhancedAIReportDisplay';

interface PublicReportShareProps {
  token?: string;
}

export const PublicReportShare: React.FC<PublicReportShareProps> = ({ token: propToken }) => {
  const [report, setReport] = useState<ExternalReport | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  const getTokenFromUrl = (): string | null => {
    const path = window.location.pathname;
    const match = path.match(/\/share\/report\/([^/]+)/);
    return match ? match[1] : null;
  };

  const token = propToken || getTokenFromUrl();

  // Force light theme
  useEffect(() => {
    document.documentElement.classList.remove('dark');
  }, []);

  useEffect(() => {
    loadReport();
  }, [token]);

  const loadReport = async () => {
    if (!token) {
      setError('Invalid share link - no token provided');
      setLoading(false);
      return;
    }

    const { data, error: fetchError } = await ExternalReportService.getReportByToken(token);

    if (fetchError || !data) {
      setError('Report not found or access denied');
    } else if (data.status !== 'completed') {
      setError('This report is still being generated');
    } else {
      setReport(data);
    }

    setLoading(false);
  };

  // Helper functions
  const getScoreColor = (score: number): string => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    if (score >= 40) return 'text-orange-600';
    return 'text-red-600';
  };

  const getGradeLetter = (score: number): string => {
    if (score >= 90) return 'A';
    if (score >= 80) return 'B';
    if (score >= 70) return 'C';
    if (score >= 60) return 'D';
    return 'F';
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <Loader size={48} className="text-blue-500 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Loading report...</p>
        </div>
      </div>
    );
  }

  if (error || !report) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center max-w-md mx-4">
          <AlertCircle size={64} className="text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Report Not Found</h2>
          <p className="text-gray-600">{error || 'This report could not be loaded.'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-8 mb-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                {report.business_name || report.target_website}
              </h1>
              <p className="text-gray-600 mt-1">AI Visibility Analysis Report</p>
              <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                <span className="flex items-center gap-1">
                  <MapPin size={14} />
                  {report.target_website}
                </span>
                <span className="flex items-center gap-1">
                  <Calendar size={14} />
                  Generated {new Date(report.created_at).toLocaleDateString()}
                </span>
              </div>
            </div>
            <div className="text-center">
              <div className={`text-5xl font-bold ${getScoreColor(report.overall_score || 0)}`}>
                {getGradeLetter(report.overall_score || 0)}
              </div>
              <div className="text-2xl font-semibold text-gray-700 mt-1">
                {report.overall_score || 0}/100
              </div>
              <p className="text-sm text-gray-500 mt-1">Your Business</p>
            </div>
          </div>
        </div>

        {/* Report Content - Using EnhancedAIReportDisplay */}
        <EnhancedAIReportDisplay report={report} isPublicView={true} />

        {/* Footer */}
        <div className="text-center mt-12 text-gray-500 text-sm">
          <p>Generated by OK Local GBP Copilot - AI Visibility Analysis Platform</p>
          <p className="mt-1">
            Report generated on {new Date(report.created_at).toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
};