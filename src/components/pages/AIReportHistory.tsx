// src/components/pages/AIReportHistory.tsx
// Page for viewing all generated external reports

import { CheckCircle, Clock, DollarSign, FileText, Search } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { ExternalReportService } from '../../lib/externalReportService';
import { supabase } from '../../lib/supabase';
import type { ExternalReportFilters, ExternalReportStats, ExternalReportSummary } from '../../types/externalReport';
import { ReportHistoryTable } from '../ui/ReportHistoryTable';

export const AIReportHistory: React.FC = () => {
  const [reports, setReports] = useState<ExternalReportSummary[]>([]);
  const [stats, setStats] = useState<ExternalReportStats | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [userId, setUserId] = useState<string>('');

  // Filters
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [dateFrom, setDateFrom] = useState<string>('');
  const [dateTo, setDateTo] = useState<string>('');

  useEffect(() => {
    loadUser();
  }, []);

  useEffect(() => {
    if (userId) {
      loadReports();
      loadStats();
    }
  }, [userId, searchQuery, statusFilter, dateFrom, dateTo]);

  const loadUser = async () => {
    const { data } = await supabase.auth.getUser();
    if (data.user) {
      setUserId(data.user.id);
    }
  };

  const loadReports = async () => {
    setLoading(true);

    const filters: ExternalReportFilters = {};

    if (searchQuery) {
      filters.search = searchQuery;
    }

    if (statusFilter && statusFilter !== 'all') {
      filters.status = statusFilter as any;
    }

    if (dateFrom) {
      filters.date_from = dateFrom;
    }

    if (dateTo) {
      filters.date_to = dateTo;
    }

    const { data, error } = await ExternalReportService.getAllReports(filters);

    if (error) {
      console.error('Error loading reports:', error);
    } else {
      setReports(data || []);
    }

    setLoading(false);
  };

  const loadStats = async () => {
    const { data } = await ExternalReportService.getReportStats();
    setStats(data);
  };

  const handlePreview = (reportId: string) => {
    // Navigate to report preview or open modal
    window.open(`/admin/reports/${reportId}`, '_blank');
  };

  const handleExportPDF = async (reportId: string) => {
    alert('PDF export functionality - to be implemented with jsPDF');
    // TODO: Implement PDF export
  };

  const handleCopyShareLink = (shareUrl: string) => {
    navigator.clipboard.writeText(shareUrl);
    alert('Share link copied to clipboard!');
  };

  const handleCopyJSON = async (reportId: string) => {
    const { data } = await ExternalReportService.getReportById(reportId);
    
    if (data && data.report_data) {
      const json = JSON.stringify(data.report_data, null, 2);
      navigator.clipboard.writeText(json);
      alert('JSON data copied to clipboard!');
    }
  };

  const handleDelete = async (reportId: string) => {
    if (!window.confirm('Are you sure you want to delete this report?')) {
      return;
    }

    const { error } = await ExternalReportService.deleteReport(reportId, userId);

    if (error) {
      alert('Error deleting report: ' + error.message);
    } else {
      alert('Report deleted successfully');
      loadReports();
      loadStats();
    }
  };

  const formatCurrency = (amount: number): string => {
    return `$${amount.toFixed(2)}`;
  };

  const formatDuration = (ms: number): string => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;

    if (minutes > 0) {
      return `${minutes}m ${remainingSeconds}s`;
    }
    return `${seconds}s`;
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          ðŸ“Š Report History
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          All AI Visibility reports generated by your team
        </p>
      </div>

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg">
                <FileText size={20} className="text-blue-600 dark:text-blue-400" />
              </div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Total Reports</span>
            </div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {stats.total_reports}
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-lg">
                <CheckCircle size={20} className="text-green-600 dark:text-green-400" />
              </div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Completed</span>
            </div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {stats.completed_reports}
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg">
                <Clock size={20} className="text-yellow-600 dark:text-yellow-400" />
              </div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Pending</span>
            </div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {stats.pending_reports}
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-center gap-3 mb-2">
              <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg">
                <DollarSign size={20} className="text-purple-600 dark:text-purple-400" />
              </div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Total Cost</span>
            </div>
            <div className="text-2xl font-bold text-gray-900 dark:text-white">
              {formatCurrency(stats.total_cost_usd)}
            </div>
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* Search */}
          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Search
            </label>
            <div className="relative">
              <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search by website or business name..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
              />
            </div>
          </div>

          {/* Status Filter */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Status
            </label>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            >
              <option value="all">All Status</option>
              <option value="completed">Completed</option>
              <option value="generating">Generating</option>
              <option value="pending">Pending</option>
              <option value="error">Error</option>
            </select>
          </div>

          {/* Date Range */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Date Range
            </label>
            <div className="flex gap-2">
              <input
                type="date"
                value={dateFrom}
                onChange={(e) => setDateFrom(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white text-sm"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Reports Table */}
      {loading ? (
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-12 text-center">
          <p className="text-gray-500 dark:text-gray-400">Loading reports...</p>
        </div>
      ) : (
        <ReportHistoryTable
          reports={reports}
          onPreview={handlePreview}
          onExportPDF={handleExportPDF}
          onCopyShareLink={handleCopyShareLink}
          onCopyJSON={handleCopyJSON}
          onDelete={handleDelete}
        />
      )}
    </div>
  );
};