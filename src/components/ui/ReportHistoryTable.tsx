// src/components/ui/ReportHistoryTable.tsx
// Table component for displaying external report history

import { Copy, Download, Eye, MoreVertical, Share2, Trash2 } from 'lucide-react';
import React, { useState } from 'react';
import type { ExternalReportSummary } from '../../types/externalReport';
import { Badge } from './Badge';

interface ReportHistoryTableProps {
  reports: ExternalReportSummary[];
  onPreview: (reportId: string) => void;
  onExportPDF: (reportId: string) => void;
  onCopyShareLink: (shareUrl: string) => void;
  onCopyJSON: (reportId: string) => void;
  onDelete: (reportId: string) => void;
}

export const ReportHistoryTable: React.FC<ReportHistoryTableProps> = ({
  reports,
  onPreview,
  onExportPDF,
  onCopyShareLink,
  onCopyJSON,
  onDelete
}) => {
  const [openMenuId, setOpenMenuId] = useState<string | null>(null);

  const getStatusVariant = (status: string): 'success' | 'warning' | 'error' | 'info' => {
    switch (status) {
      case 'completed':
        return 'success';
      case 'generating':
      case 'pending':
        return 'warning';
      case 'error':
        return 'error';
      default:
        return 'info';
    }
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const handleMenuToggle = (reportId: string) => {
    setOpenMenuId(openMenuId === reportId ? null : reportId);
  };

  const handleAction = (action: () => void) => {
    action();
    setOpenMenuId(null);
  };

  if (reports.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-12 text-center">
        <p className="text-gray-500 dark:text-gray-400">No reports found</p>
        <p className="text-sm text-gray-400 dark:text-gray-500 mt-2">
          Generate your first report to see it here
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Website
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Business Name
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Score
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Generated By
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Date
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
            {reports.map((report) => (
              <tr
                key={report.id}
                className="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors"
              >
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm font-medium text-gray-900 dark:text-white">
                    {report.target_website}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-700 dark:text-gray-300">
                    {report.business_name}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {report.overall_score !== null ? (
                    <div className="text-sm font-semibold text-gray-900 dark:text-white">
                      {report.overall_score}/100
                    </div>
                  ) : (
                    <div className="text-sm text-gray-400">-</div>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-700 dark:text-gray-300">
                    {report.generated_by}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="text-sm text-gray-700 dark:text-gray-300">
                    {formatDate(report.generated_at)}
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <Badge variant={getStatusVariant(report.status)} size="sm">
                    {report.status}
                  </Badge>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right">
                  <div className="relative inline-block">
                    <button
                      onClick={() => handleMenuToggle(report.id)}
                      className="p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors"
                    >
                      <MoreVertical size={16} className="text-gray-600 dark:text-gray-400" />
                    </button>

                    {/* Dropdown Menu */}
                    {openMenuId === report.id && (
                      <>
                        {/* Backdrop */}
                        <div
                          className="fixed inset-0 z-10"
                          onClick={() => setOpenMenuId(null)}
                        />

                        {/* Menu */}
                        <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-20">
                          <div className="py-1">
                            <button
                              onClick={() => handleAction(() => onPreview(report.id))}
                              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                              disabled={report.status !== 'completed'}
                            >
                              <Eye size={16} />
                              Preview Report
                            </button>

                            <button
                              onClick={() => handleAction(() => onExportPDF(report.id))}
                              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                              disabled={report.status !== 'completed'}
                            >
                              <Download size={16} />
                              Export PDF
                            </button>

                            {report.share_url && (
                              <button
                                onClick={() => handleAction(() => onCopyShareLink(report.share_url!))}
                                className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                              >
                                <Share2 size={16} />
                                Copy Share Link
                              </button>
                            )}

                            <button
                              onClick={() => handleAction(() => onCopyJSON(report.id))}
                              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                              disabled={report.status !== 'completed'}
                            >
                              <Copy size={16} />
                              Copy JSON
                            </button>

                            <div className="border-t border-gray-200 dark:border-gray-700 my-1" />

                            <button
                              onClick={() => handleAction(() => onDelete(report.id))}
                              className="w-full flex items-center gap-3 px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                            >
                              <Trash2 size={16} />
                              Delete
                            </button>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};